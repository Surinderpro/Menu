#!/usr/bin/env python3

import cgi
import cgitb
import json
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

# Enable CGI traceback for debugging
cgitb.enable()

# Print necessary headers
print("Content-Type: application/json\n")

def check_broken_links(links):
    broken_links = []
    for link in links:
        try:
            response = requests.get(link)
            if response.status_code != 200:
                broken_links.append(link)
        except requests.RequestException:
            broken_links.append(link)
    return broken_links

def check_security_headers(headers):
    required_headers = ["Content-Security-Policy", "Strict-Transport-Security", "X-Content-Type-Options", "X-Frame-Options", "X-XSS-Protection"]
    missing_headers = [header for header in required_headers if header not in headers]
    return missing_headers

def assess_vulnerabilities(target_url):
    try:
        response = requests.get(target_url)
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # Extract links from the page
        links = [urljoin(target_url, link.get('href')) for link in soup.find_all('a', href=True)]

        # Check for broken links
        broken_links = check_broken_links(links)

        # Check for missing security headers
        missing_headers = check_security_headers(response.headers)

        return {
            "target_url": target_url,
            "status_code": response.status_code,
            "links_found": len(links),
            "links": links,
            "broken_links": broken_links,
            "missing_security_headers": missing_headers
        }
    except requests.exceptions.RequestException as e:
        return {"error": str(e)}

try:
    form = cgi.FieldStorage()
    target_url = form.getvalue('targetUrl')

    if target_url:
        result = assess_vulnerabilities(target_url)
        print(json.dumps(result))
    else:
        print(json.dumps({"error": "Missing target URL parameter."}))
except Exception as e:
    print(json.dumps({"error": "An unexpected error occurred: " + str(e)}))

